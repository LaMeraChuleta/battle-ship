{"message":"unneeded unit expression","code":{"code":"clippy::unused_unit","explanation":null},"level":"warning","spans":[{"file_name":"src\\player.rs","byte_start":774,"byte_end":776,"line_start":27,"line_end":27,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        ()","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::unused_unit)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove the final `()`","code":null,"level":"help","spans":[{"file_name":"src\\player.rs","byte_start":774,"byte_end":776,"line_start":27,"line_end":27,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        ()","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unneeded unit expression\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\player.rs:27:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        ()\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: remove the final `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(clippy::unused_unit)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit\u001b[0m\n\n"}
{"message":"`self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement","code":{"code":"E0759","explanation":"Return type involving a trait did not require `'static` lifetime.\n\nErroneous code examples:\n\n```compile_fail,E0759\nuse std::fmt::Debug;\n\nfn foo(x: &i32) -> impl Debug { // error!\n    x\n}\n\nfn bar(x: &i32) -> Box<dyn Debug> { // error!\n    Box::new(x)\n}\n```\n\nAdd `'static` requirement to fix them:\n\n```compile_fail,E0759\n# use std::fmt::Debug;\nfn foo(x: &i32) -> impl Debug + 'static { // ok!\n    x\n}\n\nfn bar(x: &i32) -> Box<dyn Debug + 'static> { // ok!\n    Box::new(x)\n}\n```\n\nBoth [`dyn Trait`] and [`impl Trait`] in return types have an implicit\n`'static` requirement, meaning that the value implementing them that is being\nreturned has to be either a `'static` borrow or an owned value.\n\nIn order to change the requirement from `'static` to be a lifetime derived from\nits arguments, you can add an explicit bound, either to an anonymous lifetime\n`'_` or some appropriate named lifetime.\n\n```\n# use std::fmt::Debug;\nfn foo(x: &i32) -> impl Debug + '_ {\n    x\n}\nfn bar(x: &i32) -> Box<dyn Debug + '_> {\n    Box::new(x)\n}\n```\n\nThese are equivalent to the following explicit lifetime annotations:\n\n```\n# use std::fmt::Debug;\nfn foo<'a>(x: &'a i32) -> impl Debug + 'a {\n    x\n}\nfn bar<'a>(x: &'a i32) -> Box<dyn Debug + 'a> {\n    Box::new(x)\n}\n```\n\n[`dyn Trait`]: https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n[`impl Trait`]: https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits\n"},"level":"error","spans":[{"file_name":"src\\player.rs","byte_start":815,"byte_end":820,"line_start":29,"line_end":29,"column_start":31,"column_end":36,"is_primary":false,"text":[{"text":"    fn service_listen_handler(&self) -> JoinHandle<()> {","highlight_start":31,"highlight_end":36}],"label":"this data with an anonymous lifetime `'_`...","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\player.rs","byte_start":880,"byte_end":1508,"line_start":31,"line_end":44,"column_start":36,"column_end":14,"is_primary":true,"text":[{"text":"        let handle = thread::spawn(move|| loop {","highlight_start":36,"highlight_end":49},{"text":"                let mut buff = vec![0; 100];","highlight_start":1,"highlight_end":45},{"text":"                match self.tcp_player.read_exact(&mut buff) {","highlight_start":1,"highlight_end":62},{"text":"                    Ok(_) => {","highlight_start":1,"highlight_end":31},{"text":"                        let msg = buff.into_iter().take_while(|&x| x != 0).collect::<Vec<_>>();","highlight_start":1,"highlight_end":96},{"text":"                        println!(\"Mensaje Recibido en el Servidor {:?}\",msg);","highlight_start":1,"highlight_end":78},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Err(ref err) if err.kind() == ErrorKind::WouldBlock => (),","highlight_start":1,"highlight_end":79},{"text":"                    Err(_) => {","highlight_start":1,"highlight_end":32},{"text":"                        println!(\"connection with server was severed\");","highlight_start":1,"highlight_end":72},{"text":"                        break;","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":"...is captured here...","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"...and is required to live as long as `'static` here","code":null,"level":"note","spans":[{"file_name":"src\\player.rs","byte_start":866,"byte_end":879,"line_start":31,"line_end":31,"column_start":22,"column_end":35,"is_primary":true,"text":[{"text":"        let handle = thread::spawn(move|| loop {","highlight_start":22,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0759]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\player.rs:31:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    fn service_listen_handler(&self) -> JoinHandle<()> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis data with an anonymous lifetime `'_`...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        let handle = thread::spawn(move|| loop {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m____________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let mut buff = vec![0; 100];\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                match self.tcp_player.read_exact(&mut buff) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    Ok(_) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m...is captured here...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: ...and is required to live as long as `'static` here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\player.rs:31:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        let handle = thread::spawn(move|| loop {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to previous error; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to previous error; 1 warning emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0759`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0759`.\u001b[0m\n"}
